#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Ameesh Trikha <ameesh.trikha@gmail.com>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="AEM <%= @installation_type %> service"
NAME=aem<%= @installation_type %>
DAEMON=<%= @installation_path %>
START_NAME=start
STOP_NAME=stop
START_DAEMON=$DAEMON/$START_NAME
STOP_DAEMON=$DAEMON/$STOP_NAME
DAEMON_ARGS=""
PID_PATH=<%= @aem_pid_file_path %>
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
AEM_USER=<%= node["aem"]["username"] %>

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon --start --quiet --chuid $AEM_USER:$AEM_USER --pidfile $PIDFILE --exec $START_DAEMON --test > /dev/null \
    || return 1
  start-stop-daemon --start --quiet --chuid $AEM_USER:$AEM_USER --pidfile $PIDFILE --exec $START_DAEMON -- \
    $DAEMON_ARGS \
    || return 2
  # Add code here, if necessary, that waits for the process to be ready
  # to handle requests from services started subsequently which depend
  # on this one.  As a last resort, sleep for some time.
  cat $PID_PATH/cq.pid > $PIDFILE
}

#
# Function that stops the daemon/service
#
do_stop()
{
  start-stop-daemon --start --quiet --chuid $AEM_USER:$AEM_USER --pidfile $PIDFILE --exec $STOP_DAEMON -- \
    $DAEMON_ARGS \
    || return 2
  RETVAL=$?
  # Many daemons don't delete their pidfiles when they exit.
  # rm -f $PIDFILE
  return "$RETVAL"
}

status() {
  if [ -f "$PIDFILE" ] ; then
    pid=`cat "$PIDFILE"`
    if kill -0 $pid > /dev/null 2> /dev/null ; then
      # process by this pid is running.
      # It may not be our pid, but that's what you get with just pidfiles.
      # TODO(sissel): Check if this process seems to be the same as the one we
      # expect. It'd be nice to use flock here, but flock uses fork, not exec,
      # so it makes it quite awkward to use in this case.
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
   status
   code=$?
   [ -f "$PIDFILE" ] || pid=`cat "$PIDFILE"`
    if [ $code -eq 0 ] ; then
      echo "$NAME is running... PID: $pid"
    else
      echo "$NAME is not running"
    fi
    exit $code
       ;; 
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

:
